START (FLASh to sd card)
========================
* install ubuntu 24.10 server
* or instal rapsberry-pi desktop
** (pre-edit on raspberry pi imager: install ssh, wifi, etc)
** after installing and chip back in raspberry pi, start pi

** find out ip adres (werkt via monitor and keyboard)
check na opstarten ip-adres: hostname -I

ssh moet nu al werken!!
maar onderstaand kan ook nog via keyboard + monitor

sudo apt update
sudo apt upgrade

TIME
====
check time (on ubuntu, this might be wrong):

$> date

if it is not correct, correct it as described on:
see: https://www.digitalocean.com/community/tutorials/how-to-set-up-time-synchronization-on-ubuntu-20-04

I did:
sudo timedatectl set-timezone Europe/Amsterdam
sudo timedatectl set-ntp no
sudo apt install ntp


SSH
===
ssh works now, but you need to enter your password continuously.
to prevent that, do:
on laptop:
cat ~/.ssh/id_ed25519.pub
copy the line (something like ssh-ed25519 AAA)
then on raspberry pi  
vi ~/.ssh/authorized_keys
paste the copied line
save the file

(on pi-os - see https://pimylifeup.com/raspberry-pi-java/
   same, but first:
   mkdir ~/.ssh
)

VI (for raspberry pi os)
======
* vi on debian does not work friendly, so install vim:
sudo apt install vim

after that create ~/.vimrc (if it does not exist yet)
and add the line  :set mouse=v
or do: echo ":set mouse=v" > ~/.vimrc

(This makes cmd+c possible whiel in vi)

JAVA
====
sudo apt install default-jre

(on pi-os - see https://pimylifeup.com/raspberry-pi-java/
   curl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpg
   echo "deb [arch=arm64 signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main" | sudo tee /etc/apt/sources.list.d/zulu.list
   sudo apt update
   sudo apt install zulu21-jre
)


DOCKER
======
* docker: see for info: https://mariadb.com/ja/resources/blog/building-a-portable-database-server/

sudo apt install docker.io -y

-- make docker available with sudo in front of it
see https://docs.docker.com/engine/install/linux-postinstall/

sudo groupadd docker
sudo usermod -aG docker $USER
--> logout and login again


DOCKER-COMPOSE:
===============
sudo apt install docker-compose

cd ~
mkdir docker
cd docker

scp vanuit home-monitor/docker/*.yml 192.168.2.46:~/docker
(dit is inclusief prometheus.yml)

docker network create monitoring
docker-compose up -d

doe: docker ps, to see that it is running:

CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS                                       NAMES
e6d928c7ed02   grafana/grafana      "/run.sh"                3 minutes ago   Up 3 seconds   0.0.0.0:3000->3000/tcp, :::3000->3000/tcp   docker_grafana_1
8c77b56c8f37   postgres:14-alpine   "docker-entrypoint.s…"   3 minutes ago   Up 3 seconds   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   home-monitor
bba1edeb0f07   prom/prometheus      "/bin/prometheus --c…"   3 minutes ago   Up 3 seconds   0.0.0.0:9090->9090/tcp, :::9090->9090/tcp   docker_prometheus_1

========

POSTGRES
see https://www.optimadata.nl/en/blogs/how-to-run-postgres-on-docker-part-1/

==> go into container and initialize the database

docker exec -it home-monitor bash
su postgres
psql

--install database user (with superuser privilige)
see: https://phoenixnap.com/kb/postgres-create-user
CREATE ROLE "home-monitor-app" WITH PASSWORD '{{zie 1password}}' SUPERUSER LOGIN;

-- install database
see https://www.postgresql.org/docs/current/sql-createdatabase.html
CREATE DATABASE "home-monitor";

*** copy backup tables ****

HOME-MONITOR
============

mkdir home-monitor
add application.yml in home-monitor with right credentials

mkdir repository
git clone {repository-run-scripts}

git clone {home-monitor} on laptop and do mvn clean deploy
==> dit installeert de laatste versie in 'repository' en start op pi de applicatie op





TIME FOR A RESTART
==================
$> sudo reboot now
doe ping 192.168.2.39 om te zien of hij weer up is.

- ssh werkt nog steeds
- date is nog steeds goed
- docker ps ==> een runnende database en runnende grafana en prometheus


BASHRC
======
* copy and overwrite into ~/.bashrc to have another prompt (nice to have)

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]>'
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi


CRONTAB and BACKUP van home-monitor
===================================

$ cd ~/home-monitor
$ git clone {home-monitor-backup-script}
crontab ~/home-monitor/home-monitor-backup-script/crontab_pi


DROPBOX-BACKUP
==============
* copy dropbox_uploader voor het maken van backup naar dropbox

mkdir ~/dropbox-uploader
cd ~/Prive/Sources/shell/Dropbox-Uploader
scp dropbox_uploader.sh pi:~/dropbox-uploader
backup.sh

* voer op pi uit:
~/dropbox-uploader/dropbox_uploader list
* en volg de aanwijzingen.


MONITOR RASPBERRY PI
====================
deze stap kan je overslaan als je geen gebruik maakt van de data en m niet aan prometheus koppelt.
see https://theawesomegarage.com/blog/monitor-your-raspberry-pi-with-prometheus-and-grafana

doe:
sudo apt-get install prometheus-node-exporter
check: http://192.168.2.39:9100/metrics ==> should exists after install
je kan dit aan prometheus koppelen, maar dat heb ik niet gedaan.

